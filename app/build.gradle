apply plugin: 'com.android.application'
apply from: "${rootDir}/gradle/androidProject.gradle"

android {
    packagingOptions {
        pickFirst 'lib/armeabi-v7a/libFramework.ProtobufComms.MemChannel.so'
        pickFirst 'lib/x86_64/libFramework.ProtobufComms.MemChannel.so'
        pickFirst 'lib/armeabi-v7a/libgnustl_shared.so'
        pickFirst 'lib/x86_64/libgnustl_shared.so'
    }
    testOptions {
        unitTests {
            includeAndroidResources = true
        }
    }
}

dependencies {
    /* Base */
    implementation "com.tomtom.navui:Modules_NavAppBaseModule:${versions.navui}"
    /* MapManagement */
    implementation "com.tomtom.navui:Modules_MapManagementModule:${versions.navui}"
    implementation "com.tomtom.navui:Kits_MapCoreKit:${versions.navui}"
    /* FocusUi */
    implementation "com.tomtom.navui:Modules_FocusUiModule:${versions.navui}"
    /* Audio */
    implementation "com.tomtom.navui:Modules_PromptModule:${versions.navui}"
    /* SystemPort */
    implementation "com.tomtom.navui:Ports_StockSystemPort:${versions.navui}"
    /* ApiKit */
    implementation "com.tomtom.navui:Kits_SignatureApiKit:${versions.navui}"
    implementation "com.tomtom.navui:Kits_UtilKit:${versions.navui}"
    /* NavKit */
    implementation "com.tomtom.r1.navkit:NavKitService:${versions.nik}"
    /* Local projects*/
    localDependency(project, ':Kits_R1CoreKit')
    localDependency(project, ':Kits_R1AppKit')
    localDependency(project, ':Libs_LocationActionHandler')
    localDependency(project, ':Ports_R1SystemPort')

    testImplementation "junit:junit:4.12"
    testImplementation "org.mockito:mockito-core:2.17.0"
    testImplementation "org.robolectric:robolectric:3.8"
    testImplementation "com.android.support.test:rules:1.0.2-alpha1"
}

configurations.all { Configuration configuration ->
    //allow all configurations to be visible and resolvable for dependency lock plugin
    configuration.setCanBeConsumed(true)
    configuration.setCanBeResolved(true)
}

def forAllReleaseArtifacts(Closure cl) {
    android.applicationVariants.all { variant ->
        if ( (variant.name).equals("release") ) {
            variant.outputs.each { output ->
                cl(output.outputFile)
            }
        }
    }
}

task copyArtifacts {
    doLast {
        forAllReleaseArtifacts { File artifact ->
            copy {
              from artifact
              into "${artifactPublishDir}/${project.name}"
            }
        }
    }
}
assemble.finalizedBy(copyArtifacts)

task deleteArtifacts {
    doLast {
        delete "${artifactPublishDir}/${project.name}"
    }
}
clean.finalizedBy(deleteArtifacts)
