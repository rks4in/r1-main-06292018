apply plugin: 'maven-publish'

// Top-level build file where you can add configuration options common to all sub-projects/modules.

buildscript {
    repositories {
        maven { url 'https://artifactory.navkit-pipeline.tt3.com/artifactory/navapp-maven-virtual/' }
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:3.0.1'
        classpath 'com.netflix.nebula:gradle-dependency-lock-plugin:5.0.4'
    }
}

// Load the versions file
project.ext.versions = new Properties()
project.versions.load(new FileInputStream(project.file("versions.properties")))
project.versions += [
    //Lock to specific version of NavKit, to unlock use '+'
    navKitLocked: '9.11.0-18.2',
    navUiLocked: '18.2.111',
    app: "${file('revision.txt').text.trim()}"
]

def isNavKitLocked = versions.navKitLocked != '+'
def isNavUiLocked = versions.navUiLocked != '+'

if (isNavKitLocked) {
    versions.navKitResolved = versions.navKitLocked
}

if (isNavUiLocked) {
    versions.navUiResolved = versions.navUiLocked
}

if (isNavKitLocked) {
    project.versions += [ nik: "${project.versions.navKitLocked}-+" ]
} else {
    project.versions += [ nik: '+' ]
}

project.ext.tomtomGroup = 'com.tomtom'
project.ext.navuiGroup = project.ext.tomtomGroup + '.navui'
project.ext.navuiNavKitGroup = project.ext.navuiGroup + '.navkit'
project.ext.r1NavKitGroup = project.ext.tomtomGroup + ".r1.navkit"

// Finds version of NavKit recursively checking the dependency including it's child dependencies
// Throws a build time exception in case of any version mismatch
def resolveNavKitVersion(ResolvedDependency dependency) {
    if (dependency.moduleGroup == navuiNavKitGroup) {
        if (versions.navKitResolved == null) {
            versions.navKitResolved = dependency.moduleVersion
        } else if (versions.navKitResolved != dependency.moduleVersion) {
            throw new GradleException(
                    "Different version of NavKit artifacts are not allowed: " +
                    "${versions.navKitResolved} and ${dependency.moduleVersion}")
        }
    }

    dependency.children.each { it ->
        resolveNavKitVersion(it)
    }
}

// Finds version of NavUI recursively checking the dependency including it's child dependencies
// Throws a build time exception in case of any version mismatch
def resolveNavUiVersion(ResolvedDependency dependency) {
    if (dependency.moduleGroup == navuiGroup) {
        if (versions.navUiResolved == null) {
            versions.navUiResolved = dependency.moduleVersion
        } else if (versions.navUiResolved != dependency.moduleVersion) {
            throw new GradleException(
                    "Different version of NavUi artifacts are not allowed: " +
                            "${versions.navUiResolved} and ${dependency.moduleVersion}")
        }
    }

    dependency.children.each { it ->
        resolveNavUiVersion(it)
    }
}

// Resolves versions of NavKit and NavUI recursively for all project dependencies
// Throws a build time exception in case of any version mismatch
def resolveProjectNavVersions(Project subProject, boolean resolveNavKit, boolean resolveNavUi) {
    subProject.configurations.each { configuration ->
        if (!configuration.isCanBeResolved()) {
            return
        }

        configuration.dependencies.each { dependency ->
            if (dependency.group.startsWith(tomtomGroup)) {
                ResolvedDependency resolvedDependency =
                        configuration.resolvedConfiguration.firstLevelModuleDependencies.find {
                    it.moduleGroup == dependency.group && it.moduleName == dependency.name
                }

                if (resolveNavKit) {
                    resolveNavKitVersion(resolvedDependency)
                }

                if (resolveNavUi) {
                    resolveNavUiVersion(resolvedDependency)
                }
            }
        }
    }
}

def navkitResolutionStrategy(Project subProject) {
    subProject.configurations.all {
        resolutionStrategy {
            if (project.versions.navKitLocked != '+') {
                // Force all NavKit artifacts to be the same specified version
                eachDependency { DependencyResolveDetails details ->
                    if (details.requested.group == navuiNavKitGroup) {
                        details.useVersion versions.navKitLocked
                    }
                }
            } else {
                // Define dynamic NavKit artifacts version to correspond a required pattern
                componentSelection.all { ComponentSelection selection ->
                    if ( (selection.candidate.group == navuiNavKitGroup) &&
                        !selection.candidate.version.endsWith("-${versions.navkitRelease}")) {
                        selection.reject("version of navkit packages should end with \"-${versions.navkitRelease}\"")
                    } else if ( (selection.candidate.group == r1NavKitGroup) &&
                                !selection.candidate.version.contains("-${versions.navkitRelease}-")) {
                        selection.reject("version of NIK packages should contain \"-${versions.navkitRelease}-\"")
                    }
                }
            }
        }
    }
}

// Load publish properties
file("publish.properties").withReader {
   Properties props = new Properties()
   props.load(it)
   project.ext.artifactPublishDir = file(props.artifactPublishDirName)
   project.ext.publishSDK = props.publishSDK.toBoolean()
}

allprojects {
    repositories {
        maven { url 'https://artifactory.navkit-pipeline.tt3.com/artifactory/cs-fca-r1-maven-releases' }
        maven { url 'https://artifactory.navkit-pipeline.tt3.com/artifactory/navapp-maven-virtual' }
    }

    apply plugin: 'nebula.dependency-lock'

    dependencyLock{
        globalLockFile = 'dependencies.lock'
    }

    tasks.withType(JavaCompile) {
        options.compilerArgs << "-Xlint:deprecation"
    }

    afterEvaluate {
        navkitResolutionStrategy(it)

        // Resolve NavKit and/or NavUi versions if they were specified as dynamic
        if (!isNavKitLocked || !isNavUiLocked) {
            resolveProjectNavVersions(it, !isNavKitLocked, !isNavUiLocked)
        }
    }
}

subprojects {
    configurations {
        toolchain
    }
    dependencies {
        toolchain "com.tomtom.r1:toolchain:+"
    }
}

// A special way to define local dependencies is required by dependency lock plugin
// because it can not automatically resolve required dependency configuration
// as latest android plugin does
def localDependency(subProject, dependencyPath) {
    subProject.dependencies{
        implementation project(path: dependencyPath, configuration: 'archives')
    }
}

