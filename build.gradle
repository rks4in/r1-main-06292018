apply plugin: 'maven-publish'

// Top-level build file where you can add configuration options common to all sub-projects/modules.

buildscript {
    repositories {
        maven { url 'http://artifactory-ci.tomtomgroup.com/artifactory/navapp-maven-virtual/' }
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:3.0.1'
        classpath 'com.netflix.nebula:gradle-dependency-lock-plugin:5.0.4'
    }
}

// Load the versions file
project.ext.versions = new Properties()
project.versions.load(new FileInputStream(project.file("versions.properties")))
project.versions += [
    //Lock to specific version of NavKit, to unlock use '+'
    navKitLocked: '9.11.0-18.2',
    navui: '18.2.111',
]
if (project.versions.navKitLocked == '+') {
    project.versions += [ nik: '+' ]
} else {
    project.versions += [ nik: "${project.versions.navKitLocked}-+" ]
}
project.ext.navuiNavKitGroup = 'com.tomtom.navui.navkit'
project.ext.r1NavKitGroup = "com.tomtom.r1.navkit"

def checkDependencyNavKitVersion(ResolvedDependency dependency) {
    if (dependency.moduleGroup.startsWith(navuiNavKitGroup)) {
        if (versions.navKitResolved == null) {
            versions.navKitResolved = dependency.moduleVersion
        } else if (versions.navKitResolved != dependency.moduleVersion) {
            throw new GradleException(
                    "Different version of NavKit artifacts are not allowed: " +
                    "${versions.navKitResolved} and ${dependency.moduleVersion}")
        }
    }

    dependency.children.each { it ->
        checkDependencyNavKitVersion(it)
    }
}

def checkProjectNavKitVersion(Project subProject) {
    subProject.configurations.each { configuration ->
        if (!configuration.isCanBeResolved()) {
            return
        }

        configuration.dependencies.each { dependency ->
            if (dependency.group.startsWith('com.tomtom')) {
                ResolvedDependency resolvedDepndency =
                        configuration.resolvedConfiguration.firstLevelModuleDependencies.find {
                    it.moduleGroup == dependency.group && it.moduleName == dependency.name
                }
                checkDependencyNavKitVersion(resolvedDepndency)
            }
        }
    }
}

def navkitResolutionStrategy(Project subProject) {
    subProject.configurations.all {
        resolutionStrategy {
            if (project.versions.navKitLocked != '+') {
                // Force all NavKit artifacts to be the same specified version
                eachDependency { DependencyResolveDetails details ->
                    if (details.requested.group == navuiNavKitGroup) {
                        details.useVersion versions.navKitLocked
                    }
                }
            } else {
                // Define dynamic NavKit artifacts version to correspond a required pattern
                componentSelection.all { ComponentSelection selection ->
                    if ( (selection.candidate.group == navuiNavKitGroup) &&
                        !selection.candidate.version.endsWith("-${versions.navkitRelease}")) {
                        selection.reject("version of navkit packages should end with \"-${versions.navkitRelease}\"")
                    } else if ( (selection.candidate.group == r1NavKitGroup) &&
                                !selection.candidate.version.contains("-${versions.navkitRelease}-")) {
                        selection.reject("version of NIK packages should contain \"-${versions.navkitRelease}-\"")
                    }
                }
            }
        }
    }
}

// Load publish properties
file("publish.properties").withReader {
   Properties props = new Properties()
   props.load(it)
   project.ext.artifactPublishDir = file(props.artifactPublishDirName)
   project.ext.publishSDK = props.publishSDK.toBoolean()
}

allprojects {
    repositories {
        maven { url 'http://artifactory-ci.tomtomgroup.com/artifactory/cs-fca-r1-maven-releases' }
        maven { url 'http://artifactory-ci.tomtomgroup.com/artifactory/navapp-maven-virtual' }
    }

    apply plugin: 'nebula.dependency-lock'

    dependencyLock{
        globalLockFile = 'dependencies.lock'
    }

    tasks.withType(JavaCompile) {
        options.compilerArgs << "-Xlint:deprecation"
    }

    afterEvaluate {
        navkitResolutionStrategy(it)

        // Check that all resolved NavKit artifacts have the same version 
        // only if NavKit dynamic version was specified
        if (versions.navKitLocked == '+') {
            checkProjectNavKitVersion(it)
        }
    }
}

// A special way to define local dependencies is required by dependency lock plugin
// because it can not automatically resolve required dependency configuration
// as latest android plugin does
def localDependency(subProject, dependencyPath) {
    subProject.dependencies{
        implementation project(path: dependencyPath, configuration: 'archives')
    }
}

